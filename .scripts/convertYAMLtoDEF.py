# python script to convert .yaml files to lamss .def files
import yaml
import os

def getyamldict(filename):
     with open(filename, 'r') as stream:
        try:
            return yaml.load(stream)
        except yaml.YAMLError as exc:
            print 'ERROR: this may not be a yaml file'
            return 0
        
def writedicttofile(datadict,k):
    
    for key in datadict:
        if isinstance(datadict[key],dict):
            print >> k,'#ifdef ' + key
            if key not in existdict:
                existdict[key]={}
            for kk,val in datadict[key].items():
                if kk != 'config_files' and kk != 'default_file' and kk not in existdict[key] and kk not in existdict:
                    print >> k, '#define ' + kk + ' ' + str(val)
                    existdict[key][kk]=val
            print >> k, '#endif'
            
        elif key != 'config_files' and key != 'default_file' and key not in existdict:
            print >> k, '#define ' + key + ' ' + str(datadict[key])
            existdict[key]=datadict[key]

    
def main(args):
    filename=args[0]
    rootname=filename.split('/')[-1]
    indir=filename.split(rootname)[0]
    global runtype
    os.chdir(indir)
    outdir=filename.split(rootname)[0]
    if len(args)>1:
         runtype=args[1]
         print args
         if runtype != 'simulation' and runtype != 'runtime':
              raise Exception('RUNTYPE must be simulation or runtime')
              return
         if len(args)>2:
              flags=[runtype] + args[2:]
         else:
              flags=[runtype]
        
    print filename
    print 'flags are ' + str(flags)
    outname=outdir + rootname.split('.yaml')[0] + 'config.ydef'
    ymlout=outdir + rootname.split('.yaml')[0] + 'config.yaml'
    
    print outname
    k=open(outname,'w')
    

    print >> k, '// DO NOT EDIT THIS FILE, IT IS AUTO GENERATED!!!'
    print >> k, '// EDIT all.yaml and includes in that file instead!'
    print >> k, '// NOTE: If duplicates exist, the first encountered value is taken amoung the list specified by config_files in all.yaml'
    print >> k, '//        and then from global_defaults.yaml for any variables not already defined'
    
    datadict=getyamldict(filename)
    
    global existdict
    existdict={}
    print >> k, '// from file ' + filename
    writedicttofile(datadict,k)
    #print all data in datadict dict to .def file
    for key, value in datadict.items():
        if key == 'config_files':
            for fname in value:
                d=getyamldict(fname)
                print >> k, '// from file ' + fname
                writedicttofile(d,k)

    #load default dictionary, 
    if 'default_file' in datadict:
        print datadict['default_file']
        d=getyamldict(datadict['default_file'])
        print >> k, '// from file ' + datadict['default_file']
        print d
        writedicttofile(d,k)
        
    # write all_config.yaml with single definitions of all variables:
    l=open(ymlout,'w')
    print >> l, '# DO NOT EDIT THIS FILE, IT IS AUTO GENERATED!!!'
    print >> l, '# EDIT all.yaml file and includes in that file instead!'
    print >> l, '# NOTE: If duplicates exist, the first encountered value is taken amoung the list specified by config_files in all.yaml'
    print >> l, '#        and then from global_defaults.yaml for any variables not already defined'
    print >> l, '# If multiple flags exist, definition is taken first from the sim/runtime var, then from the flags in order, st the first flag would overwrite the second'
    #init dict of yamlvars
    yamldict={}
    for key,value in existdict.items():
         if type(value)!=dict:
              #print to file, and add to yamlvars
              if key not in yamldict:
                   yamldict[key]=value
     
    for key,value in existdict.items():
         if type(value)==dict:
              if key in flags:
                   # we have this flag.  Add all vars yamldict if not multiple define
                   dd=existdict[key];
                   for kk,val in dd.items():
                       if kk not in yamldict:
                            yamldict[kk]=val
                   

    yaml.dump(yamldict, l, default_flow_style=False)
    l.close()
    k.close()
                


import sys
main(sys.argv[1:])


