#!/bin/bash
# modified e. fischell 2018-03-05 for ros/moos launch with yaml
# based on t. schneider tes@mit.edu 2012-06-16
# replacement for old nsplug version of launch.sh

if [[ -z $META_PREFIX ]]; then META_PREFIX=moos; fi
if [[ -z $MOOS_PREFIX ]]; then MOOS_PREFIX=last; fi
if [[ -z $BACKGROUND && $RUNTYPE == simulation ]]; then BACKGROUND=false; fi
if [[ -z $BACKGROUND && $RUNTYPE == runtime ]]; then BACKGROUND=true; fi
if [[ -z $POPUP && $BACKGROUND == true ]]; then POPUP=false; else POPUP=true; fi
if [[ $RUNTYPE == simulation ]]; then LAUNCH_PAUSE=100; else LAUNCH_PAUSE=500; fi
if [[ -z $MISSIONS_FLAGS ]]; then MISSIONS_FLAGS=""; fi
if [[ -z $USE_SCREEN ]]; then USE_SCREEN=0; fi

set -u -e

PWD=`pwd`
MISSION_ROOT=`echo ${PWD}/$0 | sed 's|/[^/]*$||'`/..

# normalize path
MISSION_ROOT=`echo ${MISSION_ROOT} | xargs readlink -m`

# add tmp directory 
MISSION_TMP=$MISSION_ROOT/.tmp
mkdir -p $MISSION_TMP

which gpp >& /dev/null || (echo "You must have the 'GPP - Generic Preprocessor' tool on your path. Debian package is 'gpp' (sudo apt-get install gpp)" && exit 1)

if [[ ! -e $MISSION_ROOT/cruise/current ]]; then
    echo "You have not yet configured a cruise. Use ./cruise_config.sh in the root folder of this project." && exit 1;
fi


cat <<EOF

#################################################
mariner launch utility v1
e. fischell efischell@whoi.edu
#################################################
EOF
i=1

if [[ $RUNTYPE != simulation && $RUNTYPE != runtime ]]; then
    echo "$RUNTYPE is not a valid RUNTYPE: must be simulation or runtime" && exit 0
fi

# convert all .yaml files to a single all.ydef file
vdir=$PWD
pushd $MISSION_ROOT/.scripts
python convertYAMLtoDEF.py $vdir/all.yaml $RUNTYPE $MISSIONS_FLAGS
popd




# Launch stuff:


function check_param()
{
    local param=`echo $1 | sed s/=.*$//`
    set +e
    # replace tabs with spaces, strip commented lines, remove multiple spaces, cut only first field (key), grep against parameter
    cat $MISSION_ROOT/flags.txt | sed "s|\s| |" | sed "s|//.*$||" | sed "/^ *$/ d" | cut --delimiter=" " --fields 1 | egrep "^$param$|^$param=" - >& /dev/null
    if [[ $? != 0 ]]; then
        echo "No such parameter '$param' defined in flags.txt. You must define it before using it."
        exit 1
    fi
    set -e
}


function disp_param()
{
    local param=`echo $1 | sed s/=.*$//`
    printf "Flag: $param -- %s\n" "`egrep "^$param" $MISSION_ROOT/flags.txt | sed "s|//.*$||" | sed "/^ *$/ d" | cut --delimiter=" " --fields 2- | sed "s/^ *//"`"
}


FLAGS="-DRUNTYPE=${RUNTYPE} -D${RUNTYPE} -DMISSION_ROOT=${MISSION_ROOT} -DMISSION_TMP=${MISSION_TMP}"
# tack on user parameters to the list of flags passed to nsplug
for param in $@ $MISSIONS_FLAGS; do
    if [[ $param != -D* ]]; then
        check_param $param
        disp_param $param
        FLAGS="${FLAGS} -D$param"
        if [[ $param == "quiet" ]]; then POPUP=false; fi
        if [[ $param == "screen" ]]; then POPUP=false; USE_SCREEN=1; fi
    else
        FLAGS="${FLAGS} $param"
    fi
done

# ROS Launch stuff:

source $MISSION_ROOT/../mariner-src/ros/devel/setup.bash
pushd $MISSION_ROOT/.scripts

# script to make ros launch script from allconfig.yaml and ros.meta
if [POPUP==false]; then
  python writeROSLaunch.py $vdir/allconfig.yaml $vdir/ros.meta quiet
else
  python writeROSLaunch.py $vdir/allconfig.yaml $vdir/ros.meta 
fi

popd
#exit
#popd
cp $MISSION_ROOT/.tmp/roslaunch.launch $vdir/lastros.launch


# MOOS Launch stuff:

cat > $MISSION_TMP/caveat <<EOF
///////////////////////////////////////////////////////////////
// CAVEAT: This file was autogenerated and will be overwritten,
// thus you probably do not want to edit this file. 
// Instead, edit the various input files (meta, plug, in, def)
///////////////////////////////////////////////////////////////
EOF




# run text preprocessor
function preprocess()
{
    local IN=$1
    local OUT=$2

    echo "${i} | generating ${OUT} file by expanding ${IN} (> gpp) ..." && i=$(($i+1))

    rm -f ${OUT}
    
    

    # expand with gpp
    # remove all blank lines
    # prepend with caveat
    gpp -n -I`pwd` -I$MISSION_ROOT --includemarker "/// -- include % % % --" +c "//" "\n" -U "\$(" ")" "{" "," "})" "{" "}" "#" "\\\\" -M "#" "\n" " " " " "\n" "(" ")" ${FLAGS} ${IN} 2> ${MISSION_TMP}/gpp_error | sed -e '/^ *$/ d' | cat $MISSION_TMP/caveat - > ${OUT} 
     
    egrep --color "warn|error" ${MISSION_TMP}/gpp_error && (echo "gpp had warnings or errors processing ${IN} ... fail." && exit 1)

    echo "${i} | checking ${OUT} for unexpanded macros ..." && i=$(($i+1))
    egrep --color -n '\$\([^ ]*\)' ${OUT} && (echo "Unexpanded macros found in ${OUT} ... fail." && exit 1)

    if [ ! -e ${OUT} ]; then
        echo "... fail."
        exit 1
    fi
}

# autogenerate ProcessConfig=ANTLER block
function append_antler_list()
{
    local MOOS=$1
   
    echo "ProcessConfig = ANTLER" >> ${MOOS}
    echo "{" >> ${MOOS}
    egrep -q "MSBetweenLaunches" ${MOOS} || echo "  MSBetweenLaunches = ${LAUNCH_PAUSE}" >> ${MOOS}
    
    # grab @ANTLER entries
    OLDIFS=$IFS
    IFS=$'\n'
    for entry in `grep '@ANTLER' ${MOOS} | sed 's|@ANTLER||'`; do
        echo $entry >> ${MOOS}
    done
    IFS=$OLDIFS
    mv ${MOOS} ${MISSION_TMP}/temp.moos
    sed "/@ANTLER/ d" ${MISSION_TMP}/temp.moos > ${MOOS}


    # auto generate from ProcessConfig
    for moos_app in `grep ProcessConfig ${MOOS} | grep --invert-match ANTLER | sed 's|ProcessConfig *= *||'`; do
        # is this name already specified on a previously given "Run =" line ?
        egrep -q "Run *=.*${moos_app}" ${MOOS} && continue
        
        shell_name=`echo "$moos_app" | cut --delimiter=/ -f 1`
        
        # don't autolaunch uXMS
        if [[ $shell_name == "uXMS" ]]; then continue; fi
	
	if [[ $shell_name != "MOOS_ROS_BRIDGE" ]];then
        which $shell_name >& /dev/null || (echo "Cannot find $shell_name on your path. Check to make sure this application is available. Also, note that the meta file syntax for MOOS applications running as a different name from the binary name must be 'pMOOSApp/some_identifier' where pMOOSApp is the binary name, followed by a '/' and the desired additional identifier (any characters)." && exit 1)
	fi
	LAUNCHTYPE="NewConsole=${POPUP}"
	if [[ $USE_SCREEN == 1 ]]; then
	    LAUNCHTYPE="LaunchType=Screen"
	fi
        
	echo "  Run = $shell_name @ $LAUNCHTYPE,XConfig=${moos_app}Config ~ ${moos_app}" >> ${MOOS}
	

        egrep -q "^ *${moos_app}Config" ${MOOS} && continue
	echo "  ${moos_app}Config = -bg,black " >> ${MOOS}

    done    

    echo "}" >> ${MOOS}

}

# Set up bridge.moos:
#preprocess $MISSION_ROOT/cruise/current/bridge.plug $MISSION_ROOT/.tmp/bridge.moos


#run roslaunch:
echo "${i} | starting ros (> roslaunch $vdir/lastros.launch)"
roslaunch $vdir/lastros.launch >& ${MISSION_TMP}/roserrors.log &
i=$(($i+1))

#Launch the bridge:
pAntler $MISSION_ROOT/cruise/current/bridge.moos > /dev/null&

if [[ $RUNTYPE == runtime || $RUNTYPE == simulation ]]; then
    echo "All mission flags: ${FLAGS}"
    NO_DMAC="false"
    for entry in ${FLAGS}; do
      if [ "$entry" == "-Dno_dmac" ]; then
        NO_DMAC="true"
      fi
    done

    if [ -e ${META_PREFIX}.meta ]; then
        preprocess ${META_PREFIX}.meta ${MOOS_PREFIX}.moos
        append_antler_list ${MOOS_PREFIX}.moos
    fi

    # expand the files
    if [ -e bhv.meta ]; then
        preprocess bhv.meta ${MISSION_TMP}/temp.bhv
        sed "/@ANTLER/ d" ${MISSION_TMP}/temp.bhv > current.bhv
    fi
fi

# goby pb.cfg.in
if [[ $RUNTYPE == runtime || $RUNTYPE == simulation ]]; then
  # expand the files
    if [ -e goby.meta ]; then
        for in_file in `cat goby.meta | grep .in`; do         
            file_with_path=${in_file%.in}
            file=${file_with_path##*/}
            dotfile=".$file"  
            preprocess $in_file $dotfile
            mv $dotfile ${MISSION_TMP}/$file
            sed 's|^\s*//|#//|' ${MISSION_TMP}/$file | sed "/@ANTLER/ d" > $dotfile
        done
    fi
fi

#check for generate-only flag!
for entry in ${FLAGS}; do
  if [ "$entry" == "-Dgenerate_only" ]; then
    echo "found generate_only flag"
    exit 0
  fi
done

#let's go!
echo "${i} | starting moos (> roslaunch $vdir/lastros.launch; pAntler ${MOOS_PREFIX}.moos) ..." && i=$(($i+1))

if [[ $USE_SCREEN == 1 ]]; then
    echo "Use 'screen -ls' to see available screens, 'screen -r 22100.pAcommsHandler' to attach and 'C-A d' to detach"
fi



if [[ -e ${MOOS_PREFIX}.moos ]]; then
    if [[ $BACKGROUND == true ]]; then
        pAntler ${MOOS_PREFIX}.moos >& /dev/null &
	echo $! >  ${MISSION_TMP}/pAntler.pid
    else
        pAntler ${MOOS_PREFIX}.moos >& /dev/null 
    fi
fi


